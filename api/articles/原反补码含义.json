{"title":"原反补码含义","uid":"1d76e14745a91d572740ceaabc1477ea","slug":"原反补码含义","date":"2023-03-16T15:24:36.000Z","updated":"2023-03-16T15:46:53.251Z","comments":true,"path":"api/articles/原反补码含义.json","keywords":null,"cover":null,"content":"<blockquote>\n<p>一个数在计算机中的表示形式是二进制的话，那么这个数其实就叫做机器数</p>\n<p>计算机用最高位存放符号，这个位一般叫做符号位。</p>\n<p>正数的符号位为0，负数的符号位为1。</p>\n</blockquote>\n<h1 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h1><blockquote>\n<p>定义：十进制数的二进制表现形式就是原码，最左边一位为符号位，0为正，1为负。</p>\n</blockquote>\n<p>​\t举例：56 –&gt; 0 0 1 1 1 0 0 0，左边第一位为符号位，其他位为数据位</p>\n<p>​\t一个字节8bit，最大（127）：01111111，最小（-128）：11111111</p>\n<pre><code># 反码\n</code></pre>\n<blockquote>\n<p>定义：正数的反码就是本身；负数的反码是符号位保持不变，其余位取相反数</p>\n</blockquote>\n<p>​\t负数计算（不跨零）时：先用反码计算，得出的结果再转换成原码</p>\n<h1 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h1><blockquote>\n<p>正数的补码是其本身，负数的补码等于其反码 +1</p>\n</blockquote>\n<p>​\t所以进行负数运算时，跨零需要在转换成补码</p>\n<blockquote>\n<p>[+1] &#x3D; [00000001]原 &#x3D; [00000001]反 &#x3D; [00000001]补</p>\n<p>[-1] &#x3D; [10000001]原 &#x3D; [11111110]反 &#x3D; [11111111]补</p>\n<p>计算十进制的表达式: 1-1&#x3D;0</p>\n<blockquote>\n<p>1 - 1 &#x3D; 1 + (-1) &#x3D; [00000001]原 + [10000001]原 &#x3D; [10000010]原 &#x3D; -2</p>\n</blockquote>\n<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p>\n<p>为了解决原码做减法的问题, 出现了反码:</p>\n<p>计算十进制的表达式: 1-1&#x3D;0</p>\n<blockquote>\n<p>1 - 1 &#x3D; 1 + (-1) &#x3D; [0000 0001]原 + [1000 0001]原&#x3D; [0000 0001]反 + [1111 1110]反 &#x3D; [1111 1111]反 &#x3D; [1000 0000]原 &#x3D; -0</p>\n</blockquote>\n<p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.</p>\n<p>于是补码的出现, 解决了0的符号以及两个编码的问题:</p>\n<blockquote>\n<p>1-1 &#x3D; 1 + (-1) &#x3D; [0000 0001]原 + [1000 0001]原 &#x3D; [0000 0001]补 + [1111 1111]补 &#x3D; [0000 0000]补&#x3D;[0000 0000]原</p>\n</blockquote>\n<p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了</p>\n</blockquote>\n","feature":null,"text":" 一个数在计算机中的表示形式是二进制的话，那么这个数其实就叫做机器数 计算机用最高位存放符号，这个位一般叫做符号位。 正数的符号位为0，负数的符号位为1。 原码 定义：十进制数的二进制表现形式就是原码，最左边一位为符号位，0为正，1为负。 ​ 举例：56 –&gt; 0 0 1 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"计算机基础知识","slug":"计算机基础知识","count":1,"path":"api/tags/计算机基础知识.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81\"><span class=\"toc-text\">原码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81\"><span class=\"toc-text\">补码</span></a></li></ol>","author":{"name":"JKLOVE","avatar":"https://jklovedxd.top/uploads/images/2d57e244ad24631cc82da92e6ede2592.jpg","link":""},"mapped":true,"prev_post":{},"next_post":{"title":"go学习","uid":"5acd5a6770be323625071597a2471842","slug":"go学习","date":"2023-03-16T07:23:06.000Z","updated":"2023-03-16T07:23:06.938Z","comments":true,"path":"api/articles/go学习.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JKLOVE","avatar":"https://jklovedxd.top/uploads/images/2d57e244ad24631cc82da92e6ede2592.jpg","link":""}}}